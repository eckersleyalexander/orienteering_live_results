// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Orienteering_LR_Desktop.Database;

namespace Orienteering_LR_Desktop.Migrations
{
    [DbContext(typeof(CompetitorContext))]
    partial class CompetitorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.ClassCourse", b =>
                {
                    b.Property<int>("RaceClassId");

                    b.Property<int>("CourseId");

                    b.Property<int>("CompetitionPos");

                    b.Property<int>("StartTime");

                    b.Property<int>("Stage");

                    b.HasKey("RaceClassId", "Stage", "CompetitionPos");

                    b.HasIndex("RaceClassId");

                    b.HasIndex("CourseId");

                    b.ToTable("ClassCourse");
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.CompTimes", b =>
                {
                    b.Property<int>("CompetitorId");

                    b.Property<int>("Stage");

                    b.Property<int>("Status");

                    b.Property<int>("ChipId");

                    b.Property<string>("Times");

                    b.Property<int>("StartTime");

                    b.HasKey("CompetitorId", "Stage");

                    b.ToTable("CompTimes");
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.Competitor", b =>
                {
                    b.Property<int>("CompetitorId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int>("ClubId");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<int>("RaceClassId");

                    b.Property<int>("StartNo");

                    b.HasKey("CompetitorId");

                    b.HasIndex("ClubId");

                    b.HasIndex("RaceClassId");

                    b.ToTable("Competitors");
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Climb");

                    b.Property<string>("CourseData");

                    b.Property<string>("Description");

                    b.Property<float>("Distance");

                    b.Property<string>("DistanceData");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.Punch", b =>
                {
                    b.Property<int>("PunchId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CheckpointId");

                    b.Property<int>("ChipId");

                    b.Property<int>("Stage");

                    b.Property<int>("Timestamp");

                    b.HasKey("PunchId");

                    b.ToTable("Punches");
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.RaceClass", b =>
                {
                    b.Property<int>("RaceClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<int>("AgeFrom");

                    b.Property<int>("AgeTo");

                    b.Property<string>("Gender");

                    b.Property<string>("Name");

                    b.Property<int>("RaceClassType");

                    b.Property<int>("_RaceClassTypeValue");

                    b.HasKey("RaceClassId");

                    b.ToTable("RaceClasses");
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.Stage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Current");

                    b.HasKey("Name");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompetitorId");

                    b.Property<int>("CompetitorPos");

                    b.HasKey("TeamId");

                    b.HasIndex("CompetitorId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.ClassCourse", b =>
                {
                    b.HasOne("Orienteering_LR_Desktop.Database.RaceClass", "RaceClass")
                        .WithMany()
                        .HasForeignKey("RaceClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Orienteering_LR_Desktop.Database.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.CompTimes", b =>
                {
                    b.HasOne("Orienteering_LR_Desktop.Database.Competitor", "Competitor")
                        .WithMany()
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.Competitor", b =>
                {
                    b.HasOne("Orienteering_LR_Desktop.Database.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Orienteering_LR_Desktop.Database.RaceClass", "RaceClass")
                        .WithMany()
                        .HasForeignKey("RaceClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Orienteering_LR_Desktop.Database.Team", b =>
                {
                    b.HasOne("Orienteering_LR_Desktop.Database.Competitor", "Competitor")
                        .WithMany()
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
